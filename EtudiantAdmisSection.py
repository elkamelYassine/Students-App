# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TaperLeSectionET.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from configparser import SectionProxy
from PyQt5 import QtCore, QtGui, QtWidgets
from AffichageResultat import Ui_AffichageResultat
from Bulletin import Ui_Bulletin

import Etudiant as ET
import Note as NT
import Matiere as Mat

def Keys(Section):
    Tab = []
    Tab2=[]
    for i in NT.Notes:
        Tab2.append(i[0])
    for key in ET.Etudiants:
        if (ET.Etudiants[key][6] == Section) and (key in Tab2):
            Tab.append(key)
    return Tab


class Ui_EtudiantAdmisSection(object):
    def openAffichageResultat(self, dict,ch,Section):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AffichageResultat()
        self.ui.setupUi(self.window, -1,dict,ch,Section)
        self.window.show()

    def setupUi(self, EtudiantAdmisSection,R=0):
        EtudiantAdmisSection.setObjectName("EtudiantAdmisSection")
        EtudiantAdmisSection.resize(556, 444)
        self.centralwidget = QtWidgets.QWidget(EtudiantAdmisSection)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 0, 701, 771))
        self.widget.setStyleSheet("QWidget#widget{\n"
"background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:0.948, y2:0.936864, stop:0.522727 rgba(10, 204, 184, 250), stop:1 rgba(30, 169, 234)) \n"
"}")
        self.widget.setObjectName("widget")
        self.Section = QtWidgets.QLineEdit(self.widget)
        self.Section.setGeometry(QtCore.QRect(180, 180, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Section.setFont(font)
        self.Section.setObjectName("Section")
        self.pushButtonChercher = QtWidgets.QPushButton(self.widget)
        self.pushButtonChercher.setGeometry(QtCore.QRect(360, 300, 75, 23))
        self.pushButtonChercher.setObjectName("pushButtonChercher")
        if R==0 :

            self.pushButtonChercher.clicked.connect(self.getInfosAdmis)
        else :
            self.pushButtonChercher.clicked.connect(self.getInfosRedoublants)
        self.Section_2 = QtWidgets.QLabel(self.widget)
        self.Section_2.setGeometry(QtCore.QRect(180, 140, 225, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Section_2.setFont(font)
        self.Section_2.setObjectName("Section_2")
        self.Icon = QtWidgets.QLabel(self.widget)
        self.Icon.setGeometry(QtCore.QRect(30, 50, 101, 101))
        self.Icon.setObjectName("Icon")
        self.Letudiantnexistepas = QtWidgets.QLabel(self.widget)
        self.Letudiantnexistepas.setGeometry(QtCore.QRect(130, 70, 261, 31))
        self.Letudiantnexistepas.setObjectName("Letudiantnexistepas")
        self.Letudiantnexistepas.setHidden(True)
        self.infoinvalideSection = QtWidgets.QLabel(self.widget)
        self.infoinvalideSection.setGeometry(QtCore.QRect(170, 210, 251, 31))
        self.infoinvalideSection.setObjectName("infoinvalideSection")
        self.infoinvalideSection.setHidden(True)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(130, 40, 361, 21))
        self.label.setObjectName("label")
        EtudiantAdmisSection.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(EtudiantAdmisSection)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 556, 21))
        self.menubar.setObjectName("menubar")
        EtudiantAdmisSection.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(EtudiantAdmisSection)
        self.statusbar.setObjectName("statusbar")
        EtudiantAdmisSection.setStatusBar(self.statusbar)

        self.retranslateUi(EtudiantAdmisSection)
        QtCore.QMetaObject.connectSlotsByName(EtudiantAdmisSection)

    def retranslateUi(self, EtudiantAdmisSection):
        _translate = QtCore.QCoreApplication.translate
        EtudiantAdmisSection.setWindowTitle(_translate("EtudiantAdmisSection", "Recherche par section"))
        self.pushButtonChercher.setText(_translate("EtudiantAdmisSection", "Chercher"))
        self.Section_2.setText(_translate("EtudiantAdmisSection",
                                          "<html><head/><body><p align=\"center\"><span style=\" color:#ffffff;\">Section</span></p></body></html>"))
        self.Icon.setText(
            _translate("Bulletin", "<html><head/><body><p><img src=\":/newPrefix/183338.png\"/></p></body></html>"))

        self.Letudiantnexistepas.setText(_translate("EtudiantAdmisSection",
                                                    "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ff0000;\">Section inexistante</span></p></body></html>"))
        self.infoinvalideSection.setText(_translate("EtudiantAdmisSection",
                                                    "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ff0000;\">Section invalide</span></p></body></html>"))
        self.label.setText(_translate("EtudiantAdmisSection",
                                      "<html><head/><body><p><span style=\" font-size:14pt; color:#ffffff;\">Tapez la section de l\'étudiant</span></p></body></html>"))

    def CalculMoyenneMat(self, keys):
        return ((float(NT.Notes[keys][0][::3])) * 0.25 + (float(NT.Notes[keys][1][::3])) * 0.75)

    def CalculMoyenneGen(self, Numinscrits):
        Moy = 0
        Coefficinets = 0
        for keys in NT.Notes:
            if keys[0] == Numinscrits:
                Coefficinets += float(Mat.Matieres[keys[1]][2])
                Moy += self.CalculMoyenneMat(keys) * float(Mat.Matieres[keys[1]][2])
        Moy /= Coefficinets
        return (Moy)

    def CalculRang (self,Numinscrit):
        dict={}
        Section = self.Section.text()
        Tab = Keys(Section)

        for keys in Tab:
            if keys not in dict:
                dict.update({keys:self.CalculMoyenneGen(keys)})
        T = sorted(dict.items(), key=lambda x: x[1])
        return (T.index ((Numinscrit,self.CalculMoyenneGen(Numinscrit)))+1)



    def getInfosAdmis(self):
        Section = self.Section.text()
        dict = {}
        if (ET.SaisieSection(Section)):
            if (ET.RechercheParSection(ET.Etudiants, Section)):
                Tab = Keys(Section)
                for i in Tab:
                    Rang=self.CalculRang(i)
                    Moyenne = self.CalculMoyenneGen(i)
                    if Moyenne > 10:
                        dict.update({i:[ET.Etudiants[i][0],ET.Etudiants[i][1],str(Rang),str(Moyenne)]})

                self.openAffichageResultat(dict,"Liste des étudiants admis ",Section)
                self.Letudiantnexistepas.setHidden(True)
                self.infoinvalideSection.setHidden(True)
            else:
                self.Letudiantnexistepas.setHidden(False)
                self.infoinvalideSection.setHidden(True)
        else:
            self.infoinvalideSection.setHidden(False)
            self.Letudiantnexistepas.setHidden(True)

    def getInfosRedoublants(self):
        Section = self.Section.text()
        dict = {}
        if (ET.SaisieSection(Section)):
            if (ET.RechercheParSection(ET.Etudiants, Section)):
                Tab = Keys(Section)
                for i in Tab:
                    Rang=self.CalculRang(i)
                    Moyenne=self.CalculMoyenneGen(i)
                    if Moyenne < 10:
                        dict.update({i:[ET.Etudiants[i][0],ET.Etudiants[i][1],Rang,Moyenne]})

                self.openAffichageResultat(dict,"Listes des étudiants redoublants ",Section)
                self.Letudiantnexistepas.setHidden(True)
                self.infoinvalideSection.setHidden(True)
            else:
                self.Letudiantnexistepas.setHidden(False)
                self.infoinvalideSection.setHidden(True)
        else:
            self.infoinvalideSection.setHidden(False)
            self.Letudiantnexistepas.setHidden(True)


import icons_rc

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    EtudiantAdmisSection = QtWidgets.QMainWindow()
    ui = Ui_EtudiantAdmisSection()
    ui.setupUi(EtudiantAdmisSection)
    EtudiantAdmisSection.show()
    sys.exit(app.exec_())