# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TaperLeCodeET.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from AffichageMatiere import Ui_AffichageMatiere
import Matiere as Mat

class Ui_RechCodeMat(object):
    def openAffichageMatiere(self,dict):
        self.window=QtWidgets.QMainWindow()
        self.ui= Ui_AffichageMatiere()
        self.ui.setupUi(self.window,dict)
        self.window.show()

    def setupUi(self, RechCodeMat):

        
        RechCodeMat.setObjectName("RechCodeMat")
        RechCodeMat.resize(556, 444)
        self.centralwidget = QtWidgets.QWidget(RechCodeMat)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 0, 701, 771))
        self.widget.setStyleSheet("QWidget#widget{\n"
"background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:0.893, y2:0, stop:0 rgba(92, 37, 141, 255), stop:1 rgba(67, 137, 162, 255))\n"
" }")
        self.widget.setObjectName("widget")
        self.Code = QtWidgets.QLineEdit(self.widget)
        self.Code.setGeometry(QtCore.QRect(180, 180, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Code.setFont(font)
        self.Code.setObjectName("Code")
        self.pushButtonChercher = QtWidgets.QPushButton(self.widget)
        self.pushButtonChercher.setGeometry(QtCore.QRect(360, 300, 75, 23))
        self.pushButtonChercher.setObjectName("pushButtonChercher")
        self.pushButtonChercher.clicked.connect(self.getInfos)
        
        self.Code_2 = QtWidgets.QLabel(self.widget)
        self.Code_2.setGeometry(QtCore.QRect(180, 140, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Code_2.setFont(font)
        self.Code_2.setObjectName("Code_2")
        self.Icon = QtWidgets.QLabel(self.widget)
        self.Icon.setGeometry(QtCore.QRect(30, 50, 101, 101))
        self.Icon.setObjectName("Icon")
        self.Lamatierenexistepas = QtWidgets.QLabel(self.widget)
        self.Lamatierenexistepas.setGeometry(QtCore.QRect(130, 70, 261, 31))
        self.Lamatierenexistepas.setObjectName("Lamatierenexistepas")
        self.Lamatierenexistepas.setHidden(True)
        self.infoinvalideCode = QtWidgets.QLabel(self.widget)
        self.infoinvalideCode.setGeometry(QtCore.QRect(170, 210, 251, 31))
        self.infoinvalideCode.setObjectName("infoinvalideCode")
        self.infoinvalideCode.setHidden(True)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(130, 40, 361, 21))
        self.label.setObjectName("label")
        RechCodeMat.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(RechCodeMat)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 556, 21))
        self.menubar.setObjectName("menubar")
        RechCodeMat.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(RechCodeMat)
        self.statusbar.setObjectName("statusbar")
        RechCodeMat.setStatusBar(self.statusbar)

        self.retranslateUi(RechCodeMat)
        QtCore.QMetaObject.connectSlotsByName(RechCodeMat)

    def retranslateUi(self, RechCodeMat):
        _translate = QtCore.QCoreApplication.translate
        RechCodeMat.setWindowTitle(_translate("RechCodeMat", "Recherche par code de matiere"))
        self.pushButtonChercher.setText(_translate("RechCodeMat", "Chercher"))
        self.Code_2.setText(_translate("RechCodeMat", "<html><head/><body><p align=\"center\"><span style=\" color:#ffffff;\">Code invalide</span></p></body></html>"))
        self.Icon.setText(_translate("RechCodeMat", "<html><head/><body><p><img src=\":/newPrefix/livre.png\"/></p></body></html>"))
        self.Lamatierenexistepas.setText(_translate("RechCodeMat", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ff0000;\">Matiere inexistante</span></p></body></html>"))
        self.infoinvalideCode.setText(_translate("RechCodeMat", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ff0000;\">Code invalide</span></p></body></html>"))
        self.label.setText(_translate("RechCodeMat", "<html><head/><body><p><span style=\" font-size:14pt; color:#ffffff;\">Tapez le code de la matiere</span></p></body></html>"))
    def getInfos(self):
        global Code
        Code=self.Code.text()
        if (Mat.SaisieCode(Code))and (Code in Mat.Matieres.keys()) :
            dict={Code:Mat.Matieres[Code]}
            self.openAffichageMatiere(dict)
            self.Lamatierenexistepas.setHidden(True)
            self.infoinvalideCode.setHidden(True)     
        elif not(Mat.SaisieCode(Code)):
            self.infoinvalideCode.setHidden(False)
      
            self.Lamatierenexistepas.setHidden(True)
        elif not(Code  in Mat.Matieres.keys()):
            self.Lamatierenexistepas.setHidden(False)
           
            self.infoinvalideCode.setHidden(True)
        print (Mat.Matieres)

import icons_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    RechCodeMat = QtWidgets.QMainWindow()
    ui = Ui_RechCodeMat()
    ui.setupUi(RechCodeMat)
    RechCodeMat.show()
    sys.exit(app.exec_())