# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AffichageResultat.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import Note as NT
import Etudiant as ET
import Matiere as Mat
from table_function import   *

def CalculMoyenneMat(keys):
    return (round(float(NT.Notes[keys][0]), 2) * 0.25 + round(float(NT.Notes[keys][1]), 2) * 0.75)


def CalculMoyenneGen(Numinscrits):
    Moy = 0
    Coefficinets = 0
    for keys in NT.Notes:
        if keys[0] == Numinscrits:
            Coefficinets += float(Mat.Matieres[keys[1]][2])
            Moy += CalculMoyenneMat(keys) * float(Mat.Matieres[keys[1]][2])
    Moy /= Coefficinets
    return (round(Moy, 3))


def CalculRang( Numinscrit):
    dict = {}
    for keys in NT.Notes:
        if keys[0] not in dict:
            dict.update({keys[0]: CalculMoyenneGen(keys[0])})
    T = sorted(dict.items(), key=lambda x: x[1])
    return (len(T)-(T.index((Numinscrit, CalculMoyenneGen(Numinscrit))) ))


def ResultatAdmisISIMM():
    dict={}
    for i in NT.Notes:
        if i[0] not in dict :
            Rang = CalculRang(i[0])
            Moyenne = CalculMoyenneGen(i[0])
            if Moyenne >= 10:
                dict.update({i[0]: [ET.Etudiants[i[0]][0], ET.Etudiants[i[0]][1], Rang, Moyenne]})
    return dict


def ResultatRedoublantsISIMM():
    dict={}
    for i in NT.Notes:
        if i[0] not in dict :
            Rang = CalculRang(i[0])
            Moyenne = CalculMoyenneGen(i[0])
            if Moyenne < 10:
                dict.update({i[0]: [ET.Etudiants[i[0]][0], ET.Etudiants[i[0]][1], Rang, Moyenne]})
    return dict


class Ui_AffichageResultat(object):
    def setupUi(self, AffichageResultat,R=-1,Dicts=ResultatAdmisISIMM(),ch="Liste des étudiants admis de l'ISIMM",Section=""):

        if R==0:
            Dicts=ResultatRedoublantsISIMM()
            ch="Liste des étudiants redoublants de l'ISIMM"
        if R==-1:
            Dicts = ResultatAdmisISIMM()

        AffichageResultat.setObjectName("AffichageResultat")
        AffichageResultat.resize(840, 676)
        AffichageResultat.setStatusTip("")
        self.widget = QtWidgets.QWidget(AffichageResultat)
        self.widget.setGeometry(QtCore.QRect(-40, -10, 951, 741))
        self.widget.setStyleSheet("QWidget#widget{\n"
"background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:0.948, y2:0.936864, stop:0.522727 rgba(10, 204, 184, 250), stop:1 rgba(30, 169, 234)) \n"
"}")
        self.widget.setObjectName("widget")
        self.LiseteEtudiants = QtWidgets.QLabel(self.widget)
        self.LiseteEtudiants.setGeometry(QtCore.QRect(50, 140, 821, 51))
        self.LiseteEtudiants.setObjectName("LiseteEtudiants")
        self.tableAffichage = QtWidgets.QTableWidget(self.widget)
        self.tableAffichage.setGeometry(QtCore.QRect(70, 260, 761, 291))
        self.tableAffichage.setStyleSheet("QWidget#widget{\n"
"\n"
"background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:0.893, y2:0, stop:0 rgba(92, 37, 141, 255), stop:1 rgba(67, 137, 162, 255))\n"
" \n"
"    font: 11pt \"MS Shell Dlg 2\";\n"
" }\n"
"")
        self.tableAffichage.setFrameShadow(QtWidgets.QFrame.Plain)
        self.tableAffichage.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableAffichage.setTabKeyNavigation(True)
        self.tableAffichage.setGridStyle(QtCore.Qt.DashLine)
        self.tableAffichage.setObjectName("tableAffichage")
        self.tableAffichage.setColumnCount(5)
        self.tableAffichage.setRowCount(len(Dicts)+1)
        item = QtWidgets.QTableWidgetItem()
        self.tableAffichage.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableAffichage.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableAffichage.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableAffichage.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableAffichage.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableAffichage.setHorizontalHeaderItem(4, item)
        self.tableAffichage.horizontalHeader().setCascadingSectionResizes(False)
        self.tableAffichage.horizontalHeader().setDefaultSectionSize(148)
        self.tableAffichage.horizontalHeader().setStretchLastSection(False)
        self.ISIMMIcon = QtWidgets.QLabel(self.widget)
        self.ISIMMIcon.setGeometry(QtCore.QRect(410, 40, 101, 101))
        self.ISIMMIcon.setObjectName("ISIMMIcon")
        self.Section = QtWidgets.QLabel(self.widget)
        self.Section.setGeometry(QtCore.QRect(40, 200, 201, 31))
        self.Section.setObjectName("Section")
        self.Section_2 = QtWidgets.QLabel(self.widget)
        self.Section_2.setGeometry(QtCore.QRect(210, 200, 181, 31))
        self.Section_2.setObjectName("Section_2")
        self.EnregistrerPDF = QtWidgets.QPushButton(self.widget)
        self.EnregistrerPDF.setGeometry(QtCore.QRect(780, 610, 91, 31))
        self.EnregistrerPDF.setObjectName("EnregistrerPDF")
        if R==-1:
            self.EnregistrerPDF.clicked.connect(lambda: self.PDF(Dicts,ch,Section))
        if R==0:
            self.EnregistrerPDF.clicked.connect(lambda: self.PDF(ResultatRedoublantsISIMM(), ch, Section))

        self.Imprimer = QtWidgets.QPushButton(self.widget)
        self.Imprimer.setGeometry(QtCore.QRect(680, 610, 91, 31))
        self.Imprimer.setObjectName("Imprimer")
        self.Imprimer.clicked.connect(lambda: self.imprimer(ch, Section))

        if R==-1:
            self.loadData(Dicts)

        if R==0:
            self.loadData(ResultatRedoublantsISIMM())
            ch="Liste des étudiants redoublants de l'ISIMM"
        self.retranslateUi(AffichageResultat,ch,Section)
        QtCore.QMetaObject.connectSlotsByName(AffichageResultat)

    def retranslateUi(self, AffichageResultat,ch,Section):
        _translate = QtCore.QCoreApplication.translate
        AffichageResultat.setWindowTitle(_translate("AffichageResultat", "Form"))
        self.LiseteEtudiants.setText(_translate("AffichageResultat", "<html><head/><body><p align=\"center\"><span style=\" font-size:28pt; color:#ffffff;\">"+ch+"</span></p></body></html>"))
        item = self.tableAffichage.verticalHeaderItem(0)
        item.setText(_translate("AffichageResultat", "1"))
        item = self.tableAffichage.horizontalHeaderItem(0)
        item.setText(_translate("AffichageResultat", "NumInscrit"))
        item = self.tableAffichage.horizontalHeaderItem(1)
        item.setText(_translate("AffichageResultat", "Nom"))
        item = self.tableAffichage.horizontalHeaderItem(2)
        item.setText(_translate("AffichageResultat", "Prenom"))
        item = self.tableAffichage.horizontalHeaderItem(3)
        item.setText(_translate("AffichageResultat", "Rang"))
        item = self.tableAffichage.horizontalHeaderItem(4)
        item.setText(_translate("AffichageResultat", "Moyenne"))
        self.ISIMMIcon.setText(_translate("AffichageResultat", "<html><head/><body><p><img src=\":/newPrefix/ISIMM_LOGO.png\"/></p></body></html>"))

        if (Section):
            self.Section.setText(_translate("AffichageResultat", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ffffff;\">Section :</span></p></body></html>"))
            self.Section_2.setText(_translate("AffichageResultat", "<html><head/><body><p><span style=\" font-size:14pt; color:#ffffff;\">"+Section+"</span></p></body></html>"))
        else:
            self.Section.setText(_translate("AffichageResultat","<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#ffffff;\"></span></p></body></html>"))
            self.Section_2.setText(_translate("AffichageResultat","<html><head/><body><p><span style=\" font-size:14pt; color:#ffffff;\"></span></p></body></html>"))

        self.EnregistrerPDF.setText(_translate("AffichageResultat", "Enregistrer PDF"))
        self.Imprimer.setText(_translate("AffichageResultat", "Imprimer"))


    def loadData (self,Dicts):
        row=0
        for keys in Dicts :
            self.tableAffichage.setItem(row,0,QtWidgets.QTableWidgetItem(str(keys)))
            self.tableAffichage.setItem(row,1,QtWidgets.QTableWidgetItem(str(Dicts[keys][0])))
            self.tableAffichage.setItem(row,2,QtWidgets.QTableWidgetItem(str(Dicts[keys][1])))
            self.tableAffichage.setItem(row,3,QtWidgets.QTableWidgetItem(str(Dicts[keys][2])))
            self.tableAffichage.setItem(row,4,QtWidgets.QTableWidgetItem(str(Dicts[keys][3])))
            row=row+1

    def FailedMsg(self):
        msg = QMessageBox()
        msg.setWindowTitle("Enregistrement echoué")
        msg.setText("Enregistrement non valide !")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setIcon(QMessageBox.Critical)
        msg.setDetailedText(
            "Impossible d'enregistrer le fichier sous forme PDF. Essayez de quitter le fichier PDF.")
        x = msg.exec_()



    def PDF(self,dicts,ch,Section):
        data={}
        row = 0


        data=({"Numero d'inscription": [], "Nom": [],
                     "Prenom": [], "Rang": [],
                     "Moyenne": []})

        for keys in dicts:

            # self.tableAffichage.setRowCount(row)
            data["Numero d'inscription"].append((str(keys)))
            data["Nom"].append(str(dicts[keys][0]))
            data["Prenom"].append(str(dicts[keys][1]))
            data["Rang"].append(str(dicts[keys][2]))
            data["Moyenne"].append(str(dicts[keys][3]))
      #  '                 Bulletin de notes\n\n'
        pdf = PDF()
        pdf.add_page()
        pdf.set_font("Times", size=10)

        try:

            pdf.create_table("","","","",ch,Section,table_data=data, cell_width='even')

            pdf.ln()
            if ch=="Liste des étudiants admis ":
                pdf.output('Affichage des étudiants adims ' + Section + ".pdf")
            elif ch=="Listes des étudiants redoublants ":
                pdf.output('Affichage des étudiants redoubalants ' + Section + ".pdf")

            elif ch=="Liste des étudiants admis de l'ISIMM":
                pdf.output("Affichage des étudiants adims de L'ISIMM.pdf")
            elif ch=="Liste des étudiants redoublants de l'ISIMM":
                pdf.output("Liste des étudiants redoublants de l'ISIMM.pdf")


        except:
            self.FailedMsg()


    def FailedMsg2(self):
        msg = QMessageBox()
        msg.setWindowTitle("Erreur d'imprimation")
        msg.setText("imprimation échoué !")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setIcon(QMessageBox.Critical)
        msg.setDetailedText(
            "Impossible d'imprimer le fichier il faut l'enregistrer sous forme PDF d'abord.")
        x = msg.exec_()





    def imprimer(self, ch, Section):
        if ch == "Liste des étudiants admis ":
            output='Affichage des étudiants adims ' + Section + ".pdf"
        elif ch == "Listes des étudiants redoublants ":
            output='Affichage des étudiants redoubalants ' + Section + ".pdf"

        elif ch == "Liste des étudiants admis de l'ISIMM" :
            output="Affichage des étudiants adims de L'ISIMM.pdf"
        elif ch == "Liste des étudiants redoublants de l'ISIMM":
            output="Liste des étudiants redoublants de l'ISIMM.pdf"

        try:

            os.startfile( output, "print")
        except:
            self.FailedMsg2()


import icons_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AffichageResultat = QtWidgets.QWidget()
    ui = Ui_AffichageResultat()

    ui.setupUi(AffichageResultat)
    AffichageResultat.show()
    sys.exit(app.exec_())
